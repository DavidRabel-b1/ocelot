#!/bin/bash

get_box() {
    outline=$1
    fill=$2
    content=$3

    box="^pa(;8)^fg($outline)^r(75x8)^fg($fill)^ib(1)^pa(4;12)^r(67x4)\n"
    box+="^fg($outline)^r(75x16)^fg($fill)^ib(1)^pa(4)^r(67x16)^pa(8;1)$content\n"
    box+="^pa(;0)^fg($outline)^r(75x8)^fg($fill)^ib(1)^pa(4;0)^r(67x4)"

    echo "$box"
}

get_box_inner() {
    outline=$1
    fill=$2
    content=$3

    hasSecond=$( echo "$content" | grep "==" )
    if [[ -z "$hasSecond" ]] ; then
        box="^fg($outline)^r(75x16)^fg($fill)^ib(1)^pa(4)^r(67x16)^pa(8;1)$content\n"
    else
        _tmpContentFirst=${content%%==*} # first
        _tmpContent=${content#*==} # second
        box="^fg($outline)^r(75x16)^fg($fill)^ib(1)^pa(4)^r(67x16)^pa(8;1)$_tmpContentFirst\n"
        box+="^fg($outline)^r(75x16)^fg($fill)^ib(1)^pa(4)^r(67x16)^pa(8;1)$_tmpContent\n"
    fi

    echo "$box"
}

get_box_seperator() {
    lastOutline=$1
    lastFill=$2
    nextOutline=$3
    nextFill=$4

    box="^pa(;0)^fg($lastOutline)^r(75x8)^fg($lastFill)^ib(1)^pa(4;0)^r(67x4)"
    box+="^ib(1)^pa(0;8)^fg($nextOutline)^r(75x8)^fg($nextFill)^ib(1)^pa(4;12)^r(67x4)\n"

    echo "$box"
}

guess_display_height() {
    current_resolution="$( xrandr -q --verbose | grep "*current" )"
    _tmp1CR=${current_resolution#*x}

    # debug
    # echo "$_tmp1CR"

    current_height=${_tmp1CR%% *}
    echo -n "$current_height"
}

# get status about:
# - Master volume of speakers
# - display brightness
# - systemd load 1, 5, 15
get_status() {
    status="^pa(8;4)^fg(#ffffff)^r(${ovolume}x4)"
    status+="^ib(1)^pa(8;8)^fg(#ffeb00)^r(${obrightness}x4)"


    echo -n "$status"
}

display_height=$( guess_display_height )
panel_line_count=$(( display_height/16))

# debug
echo "panel_line_count=$panel_line_count"

# initialize box colors of side-panel elements
battery_boxOutline="#292929"
battery_boxFill="#292929"
tmc_boxOutline="#292929"
tmc_boxFill="#292929"
test_boxOutline="#292929"
test_boxFill="#292929"

ofifo=/tmp/ocollector.fifo
[[ -p $ofifo ]] || mkfifo -m 600 "$ofifo"
tail -f $ofifo | \
while read -r reply ; do
    # parse input from fifo
    replyType=${reply%%:=*} # use first part of reply seperated by :=
    replyContent=${reply#*:=} # use last part of reply seperated by :=
    _tmp1=${replyContent%%;;*} # first
    if [[ -z "$_tmp1" ]] ; then
        _isBox=false
    else
        _box=${replyContent#*;;} # last
        replyContent="$_tmp1"
        boxOutline=${_box%%--*} # first
        boxFill=${_box#*--} # last
        _isBox=true
    fi

    # handle each reply type
        # TODO  change to case switch, should be faster
    if [[ "$replyType" == "otime" ]] ; then
        otime="$replyContent"
    elif [[ "$replyType" == "ovolume" ]] ; then
        ovolume="$replyContent"
        ostatus="$( get_status )"
    elif [[ "$replyType" == "obrightness" ]] ; then
        obrightness="$replyContent"
        ostatus="$( get_status )"
    elif [[ "$replyType" == "odesktop" ]] ; then
        odesktop="$( get_box "$boxOutline" "$boxFill" "$replyContent" )"
    elif [[ "$replyType" == "odesktops" ]] ; then
        odesktops="$replyContent"
    elif [[ "$replyType" == "otest" ]] ; then
        otest_inner="$( get_box_inner "$boxOutline" "$boxFill" "$replyContent" )"
        otest_end="$( get_box_seperator "$boxOutline" "$boxFill" "#292929" "#292929" )"
        test_boxOutline="$boxOutline"
        test_boxFill="$boxFill"
    elif [[ "$replyType" == "obattery" ]] ; then
        obattery_start="$( get_box_seperator "#292929" "#292929" "$boxOutline" "$boxFill" )"
        obattery_inner="$( get_box_inner "$boxOutline" "$boxFill" "$replyContent" )"
        battery_boxOutline=$boxOutline
        battery_boxFill=$boxFill
    elif [[ "$replyType" == "otmc" ]] ; then
        otmc_inner="$( get_box_inner "$boxOutline" "$boxFill" "$replyContent" )"
        tmc_boxOutline=$boxOutline
        tmc_boxFill=$boxFill
    fi

    # "otime" has to be the first replyType, because it clears all lines of
    # the child-window
    echo -e "^tw()$otime"
    echo -e "$ostatus"
    echo -e "$odesktop"
    echo -e "$odesktops"
    echo -en "${obattery_start}${obattery_inner}"
    echo -en "$( get_box_seperator "$battery_boxOutline" "$battery_boxFill" "$tmc_boxOutline" "$tmc_boxFill" )"
    echo -en "${otmc_inner}"

    # test
    echo -en "$( get_box_seperator "$tmc_boxOutline" "$tmc_boxFill" "$test_boxOutline" "$test_boxFill" )"
    echo -en "${otest_inner}${otest_end}"

done | ocelot-dzen -p -l "$panel_line_count" -h 16 -ta l -w 75 -fn "monospace:bold:size=9" -e 'onstart=uncollapse' -bg "#292929"
# dzen2 -p -x 100 -y 700 -w 500
# -l 48
# -bg "#2c2c2c"
# -l 40 # xephyr development setup
